//
//  main.cpp
//  有效的数独
//
//  Created by Info on 2019/11/22.
//  Copyright © 2019 Info. All rights reserved.
//

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <string>

//判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
//
//数字 1-9 在每一行只能出现一次。
//数字 1-9 在每一列只能出现一次。
//数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
//
//
//上图是一个部分填充的有效的数独。
//
//数独部分空格内已填入了数字，空白格用 '.' 表示。
//
//示例 1:
//
//输入:
//[
//  ['5','3','.','.','7','.','.','.','.'],
//  ['6','.','.','1','9','5','.','.','.'],
//  ['.','9','8','.','.','.','.','6','.'],
//  ['8','.','.','.','6','.','.','.','3'],
//  ['4','.','.','8','.','3','.','.','1'],
//  ['7','.','.','.','2','.','.','.','6'],
//  ['.','6','.','.','.','.','2','8','.'],
//  ['.','.','.','4','1','9','.','.','5'],
//  ['.','.','.','.','8','.','.','7','9']
//]
//输出: true
//示例 2:
//
//输入:
//[
//  ['8','3','.','.','7','.','.','.','.'],
//  ['6','.','.','1','9','5','.','.','.'],
//  ['.','9','8','.','.','.','.','6','.'],
//  ['8','.','.','.','6','.','.','.','3'],
//  ['4','.','.','8','.','3','.','.','1'],
//  ['7','.','.','.','2','.','.','.','6'],
//  ['.','6','.','.','.','.','2','8','.'],
//  ['.','.','.','4','1','9','.','.','5'],
//  ['.','.','.','.','8','.','.','7','9']
//]
//输出: false
//解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
//说明:
//
//一个有效的数独（部分已被填充）不一定是可解的。
//只需要根据以上规则，验证已经填入的数字是否有效即可。
//给定数独序列只包含数字 1-9 和字符 '.' 。
//给定数独永远是 9x9 形式的。


class Solution {
public:
    bool isValidSudoku(std::vector<std::vector<char>>& board) {
        for (int i = 0; i < 9; i++) {
            // 行
            if (this->isValidLine(board[i]) == false) {
                return false;
            }
            
            // 小的九宫格
            std::vector<char> line;
            for (int j = 0; j < 9; j++) {
                int x = 3 * (i / 3) + j / 3;
                int y = 3 * (i % 3) + j % 3;
                line.push_back(board[x][y]);
            }
            if (this->isValidLine(line) == false) {
                return false;
            }
            
            // 列
            std::vector<char> col;
            for (int j = 0; j < 9; j++) {
                int x = j;
                int y = i;
                col.push_back(board[x][y]);
            }
            if (this->isValidLine(col) == false) {
                return false;
            }
        }
        
        return true;
    }
    
    // 小的九宫格，行，列 1-9只能出现一次
    bool isValidLine(std::vector<char> line) {
        std::map<char, int> map;
        for (int i = 0; i < line.size(); i++) {
            if (line[i] != '.') {
                map[line[i]]++;
                if (map[line[i]] > 1) {
                    return false;
                }
            }
        }
        return true;
    }
};

int main(int argc, const char * argv[]) {
    std::vector<std::vector<char>> board = {
        {'8','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };
    Solution *solution = new Solution();
    bool isValidSudoku = solution->isValidSudoku(board);
    printf("%d", isValidSudoku);
    return 0;
}
